8. delete和delete[]的区别
    delete只会调用一次析构函数，而delete[]会调用每一个成员的析构函数。
    对于内建简单数据类型，delete和delete[]功能是相同的。对于自定义的复杂数据类型，delete和delete[]不能互用。
    delete[]删除一个数组，delete删除一个指针

10. define 和const的联系与区别（编译阶段、安全性、内存占用等）
    define定义的常量没有类型，只是进行了简单的替换，可能会有多个拷贝，占用的内存空间大；const定义的常量是有类型的，存放在静态存储区，只有一个拷贝，占用的内存空间小。
    define定义的常量是在预编译阶段进行替换，而const在编译阶段确定它的值。
    define不会进行类型安全检查，而const会进行类型安全检查，安全性更高。
    const可以定义函数而define不可以。

typedef 和 define 有什么区别
    用法不同：typedef 用来定义一种数据类型的别名，增强程序的可读性。define 主要用来定义常量，以及书写复杂使用频繁的宏；
    执行时间不同：define 是宏定义，是预编译的部分，其发生在编译之前，只是简单的进行字符串的替换，不进行类型的检查。typedef 是编译阶段的一部分，有类型检查的功能。( const 也是在编译阶段 )
    作用域不同：typedef 有作用域限定。define 不受作用域约束(因为在预编译阶段已经进行)，只要是在 define 声明后的引用都是正确的。

    #define INT_D int*
    INT_D a,b;
    （1）使用define只是单纯地进行宏替换，并不会过多地操作，因此就导致了，替换后，编译器把b看成了是int类型的变量
    （2）而typedef是给原来地类型声明一个新的变量类型，因此typedef其实还是原来按照其原来的类型定义变量的规则等去定义变量，因此使用typedef后，定义变量是不受影响的
