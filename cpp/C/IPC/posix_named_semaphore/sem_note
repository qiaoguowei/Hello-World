

#include <semaphore.h>

sem_t *sem_open(const char *name, int oflag, ... /* mode_t mode, unsigned int value */);

        oflag参数可以是0、O_CREAT或O_CREAT|O_EXCL，如果指定了O_CREAT标志，那么第三个和第四个参数是需要的：其中mode
    参数指定权限位，value参数指定信号量的初始值。该初始值不能超过SEM_VALUE_MAX（这个常值必须至少为32767）。二值信号
    量的初值通常为1，计数信号量的初始值则往往大于1。


int sem_close(sem_t *sem);

        一个进程终止时，内核还对其上仍然打开着的所有有名信号量自动执行这样的信号量关闭操作。不论进程是自愿终止的还是
    非自愿终止的，这种关闭都会发生。
        关闭一个信号量并没有将他从系统中删除。这就是说，Posix有名信号量至少是随内核持续的：即使当前没有进程打开某个
    信号量，它的值仍然保持。


int sem_unlink(const char *name);

        有名信号量使用sem_unlink从系统中删除。
        每个信号量有一个引用计数器记录当前的打开次数（就像文件一样），sem_unlink类似于文件I/O的unlink函数：当引用计数
    还是大于0时，name就能从文件系统中删除，然而其信号量的析构（不同于将它的名字从文件系统中删除）却要等到最后一个
    sem_close发生时为止。


int sem_wait(sem_t *sem);

        sem_wait函数测试所指定信号量的值，如果该值大于0，那就将它减1并立即返回。如果该值等于0，调用线程就被投入到睡眠
    中，直到该值变为大于0，这时再将它减1，函数随后返回。我们之前提到过，考虑到访问同一信号量的其他线程，”测试并减1”操
    作必须是原子的。


int sem_trywait(sem_t *sem);

        sem_wait和sem_trywait的差别是：当所指定信号量的值已经是0时，后者并不将调用线程投入睡眠。相反，它返回一个EAGAIN错误
        如果被某个信号中断，sem_wait就可能过早地返回，所返回的错误是EINTR


int sem_post(sem_t *sem);

        当一个线程使用完某个信号量时，它应该调用sem_post。本函数把所指定的值加1，然后唤醒正在等待该信号量值变为正数的任意线程。


int sem_getvalue(sem_t *sem, int *valp);

        sem_getvalue在由valp指向的整数中返回所指定信号量的当前值。如果该信号量当前已上锁，那么返回值或为0，或为某个负数
    ，其绝对值就是等待该信号量解锁的线程数。


int sem_init(sem_t *sem, int shared, unsigned int value);

        此前的内容处理的是Posix有名信号量。这些信号量由一个name参数标识，他通常指代文件系统中的某个文件。然而Posix也提供基于内存的
    信号量，它们由应用程序分配信号量的内存空间（也就是分配一个sem_t数据类型的内存空间），然后由系统初始化它们的值。
        基于内存的信号量是由sem_init初始化的。sem参数指向应用程序必须分配的sem_t变量。如果shared为0，那么待初始化的信号量是在
    同一个进程的各个线程间共享的，否则该信号量是在进程间共享的。当shared为非零时，该信号量必须存放在某种类型的共享内存区中，而
    即将使用它的所有进程都要能访问该共享内存区。跟sem_open一样，value参数是该信号量的初始值。


int sem_destroy(sem_t *sem);

    使用完一个基于内存的信号量后，我们调用sem_destroy摧毁它。

